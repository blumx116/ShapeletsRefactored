function [tree_edges, tree_node_vals] = Extract_Basic_Decision_Tree_func(FILENAME)
%EXTRACT_DECISION_TREE_FUNC This function will take as input a tree file
%generated from the logical shapelets code (downloaded from original
%author), and translate it into a matlab tree (shapelet decision tree).  
%   Inputs:
%   - FILENAME:  The filename of the tree file
%
%   Outputs:
%   - tree_edges:  Edges of the tree (defines the layout)
%   - tree_node_vals:  The node values of the tree
%
%   This code is based off the original author's c code to traverse the
%   tree file created after training.
%
%   Note that this can only extract the base information from the file,
%   which includes the labels generated by the logical shapelets code, each
%   shapelet, and their threshold distances.  This does not compute other 
%   metrics such as starting entropy, gain, etc.

MY_FILE = fopen(FILENAME);
next_line = fgets(MY_FILE);

num_nodes = 0;
node_ID_list = [];
tree_edges = [];
tree_node_vals = [];

while(next_line ~= -1)
    file_node_ID = str2double(next_line);
    
    next_line = fgets(MY_FILE);
    
    % Add the node ID to the node ID list
    num_nodes = num_nodes + 1;
    node_ID_list(num_nodes) = file_node_ID; % A temporary list to hold node IDs
    
    % Determine whether the node is a decision node or a leaf node
    shapelet_length = str2double(next_line);
    if (shapelet_length == 0)
        % This is a leaf node
        % Get the class ID
        next_line = fgets(MY_FILE);
        class_ID = str2double(next_line);
        
        % And add it to the tree_node_vals list of the tree
        tree_node_vals{num_nodes} = class_ID;
    else
        % This is a decision node
        % Extract the shapelet and the distance threshold
        next_line = fgets(MY_FILE);
        shapelet_dist = str2double(next_line);
        
        next_line = fgets(MY_FILE);
        shapelet = str2num(next_line);
        
        % And add the shapelet and its distance threshold to the tree_node_vals
        % list of the tree
        tree_node_vals{num_nodes} = {shapelet, shapelet_dist};
    end
    
    % Get the next line (which will have a node ID)
    next_line = fgets(MY_FILE);
end

fclose(MY_FILE);

node_ID_list = sort(node_ID_list);

% Assume the 1st node is a 1 (the root node)
tree_edges(1) = 0;
for i = 2:size(node_ID_list,2)
    if (mod(node_ID_list(i),2) == 0)
        % Even
        tree_edges(i) = node_ID_list(i)/2;
    else
        % Odd
        tree_edges(i) = (node_ID_list(i) - 1)/2;
    end
end


end

